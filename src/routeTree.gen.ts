/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AppUIndexRouteImport } from './routes/_app/u/index'
import { Route as AppProfileIndexRouteImport } from './routes/_app/profile/index'
import { Route as AppOffersIndexRouteImport } from './routes/_app/offers/index'
import { Route as AppChatsIndexRouteImport } from './routes/_app/chats/index'
import { Route as AppBrowseIndexRouteImport } from './routes/_app/browse/index'
import { Route as AppBindersIndexRouteImport } from './routes/_app/binders/index'
import { Route as AuthAuthCallbackRouteImport } from './routes/_auth/auth/callback'
import { Route as AppUUserIdRouteImport } from './routes/_app/u/$userId'
import { Route as AppBindersCreateRouteImport } from './routes/_app/binders/create'
import { Route as AppBindersBinderIdIndexRouteImport } from './routes/_app/binders/$binderId/index'
import { Route as AppBindersBinderIdSettingsRouteImport } from './routes/_app/binders/$binderId/settings'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AppUIndexRoute = AppUIndexRouteImport.update({
  id: '/u/',
  path: '/u/',
  getParentRoute: () => AppRoute,
} as any)
const AppProfileIndexRoute = AppProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => AppRoute,
} as any)
const AppOffersIndexRoute = AppOffersIndexRouteImport.update({
  id: '/offers/',
  path: '/offers/',
  getParentRoute: () => AppRoute,
} as any)
const AppChatsIndexRoute = AppChatsIndexRouteImport.update({
  id: '/chats/',
  path: '/chats/',
  getParentRoute: () => AppRoute,
} as any)
const AppBrowseIndexRoute = AppBrowseIndexRouteImport.update({
  id: '/browse/',
  path: '/browse/',
  getParentRoute: () => AppRoute,
} as any)
const AppBindersIndexRoute = AppBindersIndexRouteImport.update({
  id: '/binders/',
  path: '/binders/',
  getParentRoute: () => AppRoute,
} as any)
const AuthAuthCallbackRoute = AuthAuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => AuthRoute,
} as any)
const AppUUserIdRoute = AppUUserIdRouteImport.update({
  id: '/u/$userId',
  path: '/u/$userId',
  getParentRoute: () => AppRoute,
} as any)
const AppBindersCreateRoute = AppBindersCreateRouteImport.update({
  id: '/binders/create',
  path: '/binders/create',
  getParentRoute: () => AppRoute,
} as any)
const AppBindersBinderIdIndexRoute = AppBindersBinderIdIndexRouteImport.update({
  id: '/binders/$binderId/',
  path: '/binders/$binderId/',
  getParentRoute: () => AppRoute,
} as any)
const AppBindersBinderIdSettingsRoute =
  AppBindersBinderIdSettingsRouteImport.update({
    id: '/binders/$binderId/settings',
    path: '/binders/$binderId/settings',
    getParentRoute: () => AppRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/binders/create': typeof AppBindersCreateRoute
  '/u/$userId': typeof AppUUserIdRoute
  '/auth/callback': typeof AuthAuthCallbackRoute
  '/binders': typeof AppBindersIndexRoute
  '/browse': typeof AppBrowseIndexRoute
  '/chats': typeof AppChatsIndexRoute
  '/offers': typeof AppOffersIndexRoute
  '/profile': typeof AppProfileIndexRoute
  '/u': typeof AppUIndexRoute
  '/binders/$binderId/settings': typeof AppBindersBinderIdSettingsRoute
  '/binders/$binderId': typeof AppBindersBinderIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/binders/create': typeof AppBindersCreateRoute
  '/u/$userId': typeof AppUUserIdRoute
  '/auth/callback': typeof AuthAuthCallbackRoute
  '/binders': typeof AppBindersIndexRoute
  '/browse': typeof AppBrowseIndexRoute
  '/chats': typeof AppChatsIndexRoute
  '/offers': typeof AppOffersIndexRoute
  '/profile': typeof AppProfileIndexRoute
  '/u': typeof AppUIndexRoute
  '/binders/$binderId/settings': typeof AppBindersBinderIdSettingsRoute
  '/binders/$binderId': typeof AppBindersBinderIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_app/binders/create': typeof AppBindersCreateRoute
  '/_app/u/$userId': typeof AppUUserIdRoute
  '/_auth/auth/callback': typeof AuthAuthCallbackRoute
  '/_app/binders/': typeof AppBindersIndexRoute
  '/_app/browse/': typeof AppBrowseIndexRoute
  '/_app/chats/': typeof AppChatsIndexRoute
  '/_app/offers/': typeof AppOffersIndexRoute
  '/_app/profile/': typeof AppProfileIndexRoute
  '/_app/u/': typeof AppUIndexRoute
  '/_app/binders/$binderId/settings': typeof AppBindersBinderIdSettingsRoute
  '/_app/binders/$binderId/': typeof AppBindersBinderIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/binders/create'
    | '/u/$userId'
    | '/auth/callback'
    | '/binders'
    | '/browse'
    | '/chats'
    | '/offers'
    | '/profile'
    | '/u'
    | '/binders/$binderId/settings'
    | '/binders/$binderId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/binders/create'
    | '/u/$userId'
    | '/auth/callback'
    | '/binders'
    | '/browse'
    | '/chats'
    | '/offers'
    | '/profile'
    | '/u'
    | '/binders/$binderId/settings'
    | '/binders/$binderId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth'
    | '/_auth/login'
    | '/_auth/register'
    | '/_app/binders/create'
    | '/_app/u/$userId'
    | '/_auth/auth/callback'
    | '/_app/binders/'
    | '/_app/browse/'
    | '/_app/chats/'
    | '/_app/offers/'
    | '/_app/profile/'
    | '/_app/u/'
    | '/_app/binders/$binderId/settings'
    | '/_app/binders/$binderId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_app/u/': {
      id: '/_app/u/'
      path: '/u'
      fullPath: '/u'
      preLoaderRoute: typeof AppUIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/profile/': {
      id: '/_app/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/offers/': {
      id: '/_app/offers/'
      path: '/offers'
      fullPath: '/offers'
      preLoaderRoute: typeof AppOffersIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/chats/': {
      id: '/_app/chats/'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AppChatsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/browse/': {
      id: '/_app/browse/'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof AppBrowseIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/binders/': {
      id: '/_app/binders/'
      path: '/binders'
      fullPath: '/binders'
      preLoaderRoute: typeof AppBindersIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_auth/auth/callback': {
      id: '/_auth/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthAuthCallbackRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_app/u/$userId': {
      id: '/_app/u/$userId'
      path: '/u/$userId'
      fullPath: '/u/$userId'
      preLoaderRoute: typeof AppUUserIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/binders/create': {
      id: '/_app/binders/create'
      path: '/binders/create'
      fullPath: '/binders/create'
      preLoaderRoute: typeof AppBindersCreateRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/binders/$binderId/': {
      id: '/_app/binders/$binderId/'
      path: '/binders/$binderId'
      fullPath: '/binders/$binderId'
      preLoaderRoute: typeof AppBindersBinderIdIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/binders/$binderId/settings': {
      id: '/_app/binders/$binderId/settings'
      path: '/binders/$binderId/settings'
      fullPath: '/binders/$binderId/settings'
      preLoaderRoute: typeof AppBindersBinderIdSettingsRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppBindersCreateRoute: typeof AppBindersCreateRoute
  AppUUserIdRoute: typeof AppUUserIdRoute
  AppBindersIndexRoute: typeof AppBindersIndexRoute
  AppBrowseIndexRoute: typeof AppBrowseIndexRoute
  AppChatsIndexRoute: typeof AppChatsIndexRoute
  AppOffersIndexRoute: typeof AppOffersIndexRoute
  AppProfileIndexRoute: typeof AppProfileIndexRoute
  AppUIndexRoute: typeof AppUIndexRoute
  AppBindersBinderIdSettingsRoute: typeof AppBindersBinderIdSettingsRoute
  AppBindersBinderIdIndexRoute: typeof AppBindersBinderIdIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppBindersCreateRoute: AppBindersCreateRoute,
  AppUUserIdRoute: AppUUserIdRoute,
  AppBindersIndexRoute: AppBindersIndexRoute,
  AppBrowseIndexRoute: AppBrowseIndexRoute,
  AppChatsIndexRoute: AppChatsIndexRoute,
  AppOffersIndexRoute: AppOffersIndexRoute,
  AppProfileIndexRoute: AppProfileIndexRoute,
  AppUIndexRoute: AppUIndexRoute,
  AppBindersBinderIdSettingsRoute: AppBindersBinderIdSettingsRoute,
  AppBindersBinderIdIndexRoute: AppBindersBinderIdIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthAuthCallbackRoute: typeof AuthAuthCallbackRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthAuthCallbackRoute: AuthAuthCallbackRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
